import numpy as np
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelBinarizer
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam

# Load dataset (Iris dataset as an example)
data = load_iris()
X = data.data
y = data.target

# Preprocess the data
scaler = StandardScaler()
X = scaler.fit_transform(X)

# One-hot encode the labels
encoder = LabelBinarizer()
y = encoder.fit_transform(y)

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define the Artificial Neural Network (ANN)
model = Sequential([
    Dense(10, input_dim=X_train.shape[1], activation='relu'),
    Dense(10, activation='relu'),
    Dense(y_train.shape[1], activation='softmax')
])

# Compile the model
model.compile(optimizer=Adam(learning_rate=0.01), loss='categorical_crossentropy', metrics=['accuracy'])

# Train the model
history = model.fit(X_train, y_train, epochs=50, batch_size=8, validation_split=0.2, verbose=1)

# Evaluate the model on test data
test_loss, test_accuracy = model.evaluate(X_test, y_test, verbose=0)
print(f"Test Loss: {test_loss:.4f}, Test Accuracy: {test_accuracy:.4f}")

# Query the network with a sample input
sample_input = X_test[0].reshape(1, -1)  # Reshape for single input
predicted_class = np.argmax(model.predict(sample_input), axis=-1)
actual_class = np.argmax(y_test[0])

print(f"Sample Input Prediction: {data.target_names[predicted_class[0]]}")
print(f"Actual Class: {data.target_names[actual_class]}")
